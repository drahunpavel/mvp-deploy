pipeline {
    agent {
        node {
            label 'agent-1'
        }
    }
    
    environment {
        DOCKER_REGISTRY = 'drpaul1864/mvp-deploy'
        K8S_NAMESPACE = 'mvp-deploy-app'
        BUILD_TAG = "${new Date().format('yyyyMMdd_HHmm')}"
    }
    
    stages { 
        stage('Checkout git') {
            steps {
                sh "echo 'Selected branch: ${params.BRANCH_NAME}'"
                git branch: "${params.BRANCH_NAME}", url: 'git@github.com:drahunpavel/mvp-deploy.git'
            }
        }
        stage('Prepare k8s') {
            steps {
                sh '''
                    which kubectl
                    kubectl version --client
                '''
                
                withCredentials([
                    file(credentialsId: 'kubeconfig-template', variable: 'KUBE_TEMPLATE'),
                    string(credentialsId: 'K8S_TOKEN', variable: 'K8S_TOKEN'),  
                    string(credentialsId: 'K8S_CA_CERT', variable: 'K8S_CA_CERT')
                ]) {
                    // sh 'echo "$K8S_TOKEN" | head -c 50' 
                    // sh 'echo "$K8S_CA_CERT" | head -c 50' 
                    sh '''
                        mkdir -p .kube
                        envsubst < $KUBE_TEMPLATE > .kube/config
                    '''
                }
                
                echo "Test k8s connection"
                
                sh '''
                    export KUBECONFIG=$(pwd)/.kube/config
                    kubectl --insecure-skip-tls-verify=true cluster-info
                    kubectl --insecure-skip-tls-verify=true get nodes
                '''
            }
        }
        stage('Build Images') {
            steps {
                
                echo "Inject .envs"
                withCredentials([
                    file(credentialsId: 'env-auth-api', variable: 'AUTH_ENV'),
                    file(credentialsId: 'env-ui-api', variable: 'UI_ENV'),
                    file(credentialsId: 'env-db', variable: 'DB_ENV')
                ]) {
                    sh '''
                        rm -f backend/auth-api/.env
                        cp "$AUTH_ENV" backend/auth-api/.env
                        
                        rm -f backend/ui-api/.env
                        cp "$UI_ENV" backend/ui-api/.env
                        
                        rm -f .env
                        cp "$DB_ENV" .env
                        chmod u+w .env
                        echo "" >> .env
                        echo "BUILD_TAG=$BUILD_TAG" >> .env
                    '''
                }
                
                echo "Delete images"
                sh 'docker image prune -a --force'
                
                echo "Build images"
                sh 'docker compose -f docker-compose.jenkins.yml build'
            }
        }
        stage('Push Images') {
            steps {
                
                sh '''
                    echo "docker images:"
                    docker images || echo "failed"
                '''
                
                withCredentials([usernamePassword(credentialsId: 'docker-hub-user-password', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
        
                        docker push ${DOCKER_REGISTRY}:auth-api-${BUILD_TAG}
                        docker push ${DOCKER_REGISTRY}:ui-api-${BUILD_TAG}
                        docker push ${DOCKER_REGISTRY}:frontend-${BUILD_TAG}
                        
                        docker logout
                    '''
                }
            }
        }
    }
}